{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nexport const getDoctors = createAsyncThunk('doctor/getDoctors', async () => {\n  const api = await fetch('http://127.0.0.1:8000/api/doctors');\n  const response = await api.json();\n  return response;\n});\nexport const getDoctorDetail = createAsyncThunk('doctor/getDoctorDetail', async args => {\n  const id = args.id;\n  const api = await fetch(`http://127.0.0.1:8000/api/doctorDetails/${id}`);\n  const response = await api.json();\n  return response;\n});\nexport const updateDoctorDetails = createAsyncThunk('doctor/updateDoctorDetails', async args => {\n  const id = args.id;\n  const response = await fetch(`http://127.0.0.1:8000/api/updateDoctorDetails/${id}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: args.name,\n      description: args.description,\n      email: args.email,\n      image: args.image,\n      clinic_address: args.clinic_address,\n      clinic_mobile: args.clinic_mobile,\n      experience: args.experience,\n      specialization: args.specialization\n    })\n  });\n\n  if (response.ok) {\n    Swal.fire({\n      title: \"Doctor\",\n      text: \"Has been updated Successfully\",\n      type: \"success\"\n    });\n  }\n\n  const res = response.json();\n  return res;\n});\nconst doctorSlice = createSlice({\n  name: 'doctor',\n  initialState: {\n    doctors: [],\n    status: null\n  },\n  extraReducers: {\n    //get doctors from api\n    [getDoctors.fulfilled]: (state, action) => {\n      state.status = 'success fetch data';\n      state.doctors = action.payload;\n    },\n    [getDoctors.pending]: state => {\n      state.status = 'pending fetch data';\n    },\n    [getDoctors.rejected]: state => {\n      state.status = 'rejected fetch data';\n    },\n    // get one doctor from api\n    [getDoctorDetail.fulfilled]: (state, action) => {\n      state.status = 'success send data';\n      state.doctors.push(action.payload);\n    },\n    [getDoctorDetail.pending]: state => {\n      state.status = 'pending send data';\n    },\n    [getDoctorDetail.rejected]: state => {\n      state.status = 'rejected send data';\n    },\n    // update doctor in api\n    [updateDoctorDetails.fulfilled]: (state, action) => {\n      state.status = 'success update data';\n      const {\n        id\n      } = action.payload;\n      const doctor = state.doctors.find(doctor => doctor.id == id);\n      doctor.name = action.payload.name;\n      doctor.description = action.payload.description;\n      doctor.image = action.payload.image;\n      doctor.email = action.payload.email;\n      doctor.clinic_address = action.payload.clinic_address;\n      doctor.clinic_mobile = action.payload.clinic_mobile;\n      doctor.experience = action.payload.experience;\n      doctor.specialization = action.payload.specialization;\n    },\n    [updateDoctorDetails.pending]: state => {\n      state.status = 'pending update data';\n    },\n    [updateDoctorDetails.rejected]: state => {\n      state.status = 'rejected update data';\n    }\n  }\n});\nexport default doctorSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","Swal","getDoctors","api","fetch","response","json","getDoctorDetail","args","id","updateDoctorDetails","method","headers","body","JSON","stringify","name","description","email","image","clinic_address","clinic_mobile","experience","specialization","ok","fire","title","text","type","res","doctorSlice","initialState","doctors","status","extraReducers","fulfilled","state","action","payload","pending","rejected","push","doctor","find","reducer"],"sources":["C:/Users/dell/Desktop/startupcompany_project_redux/front_end/src/redux/doctorSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios'\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n\r\nexport const getDoctors = createAsyncThunk(\r\n    'doctor/getDoctors',\r\n    async () => {\r\n        const api = await fetch('http://127.0.0.1:8000/api/doctors');\r\n        const response = await api.json();\r\n\r\n        return response;\r\n    }\r\n);\r\n\r\nexport const getDoctorDetail = createAsyncThunk(\r\n    'doctor/getDoctorDetail',\r\n    async (args) => {\r\n        const id = args.id;\r\n        const api = await fetch(`http://127.0.0.1:8000/api/doctorDetails/${id}`);\r\n        const response = await api.json();\r\n        return response;\r\n    }\r\n);\r\n\r\nexport const updateDoctorDetails = createAsyncThunk(\r\n    'doctor/updateDoctorDetails',\r\n    async (args) => {\r\n\r\n        const id = args.id;\r\n        const response = await fetch(`http://127.0.0.1:8000/api/updateDoctorDetails/${id}`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                name: args.name,\r\n                description: args.description,\r\n                email: args.email,\r\n                image: args.image,\r\n                clinic_address: args.clinic_address,\r\n                clinic_mobile: args.clinic_mobile,\r\n                experience: args.experience,\r\n                specialization: args.specialization\r\n\r\n            }),\r\n        })\r\n\r\n        if (response.ok) {\r\n            Swal.fire({\r\n                title: \"Doctor\",\r\n                text: \"Has been updated Successfully\",\r\n                type: \"success\"\r\n            });\r\n        }\r\n        const res = response.json();\r\n        return res;\r\n    }\r\n);\r\n\r\nconst doctorSlice = createSlice({\r\n    name: 'doctor',\r\n    initialState: { doctors: [], status: null },\r\n    extraReducers: {\r\n        //get doctors from api\r\n        [getDoctors.fulfilled]: (state, action) => {\r\n            state.status = 'success fetch data';\r\n            state.doctors = action.payload;\r\n\r\n        },\r\n        [getDoctors.pending]: (state) => {\r\n            state.status = 'pending fetch data';\r\n\r\n        },\r\n        [getDoctors.rejected]: (state) => {\r\n            state.status = 'rejected fetch data';\r\n        },\r\n\r\n       // get one doctor from api\r\n        [getDoctorDetail.fulfilled]: (state, action) => {\r\n            state.status = 'success send data';\r\n            state.doctors.push(action.payload);\r\n\r\n        },\r\n        [getDoctorDetail.pending]: (state) => {\r\n            state.status = 'pending send data';\r\n\r\n        },\r\n        [getDoctorDetail.rejected]: (state) => {\r\n            state.status = 'rejected send data';\r\n        },\r\n\r\n\r\n       // update doctor in api\r\n        [updateDoctorDetails.fulfilled]: (state, action) => {\r\n            state.status = 'success update data';\r\n            const { id } = action.payload;\r\n            const doctor = state.doctors.find((doctor) => doctor.id == id);\r\n            doctor.name = action.payload.name;\r\n            doctor.description = action.payload.description;\r\n            doctor.image = action.payload.image;\r\n            doctor.email = action.payload.email;\r\n            doctor.clinic_address = action.payload.clinic_address;\r\n            doctor.clinic_mobile = action.payload.clinic_mobile;\r\n            doctor.experience = action.payload.experience;\r\n            doctor.specialization = action.payload.specialization;\r\n\r\n        },\r\n        [updateDoctorDetails.pending]: (state) => {\r\n            state.status = 'pending update data';\r\n\r\n        },\r\n        [updateDoctorDetails.rejected]: (state) => {\r\n            state.status = 'rejected update data';\r\n        },\r\n\r\n\r\n\r\n    }\r\n})\r\n\r\nexport default doctorSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}