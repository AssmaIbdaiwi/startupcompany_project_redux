{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\"; // export const getComments = createAsyncThunk(\"comment/getComments\"\n// , async (args) => {\n//   const id = args.id;\n//   const api = await fetch(`http://127.0.0.1:8000/api/apicomment/${id}`);\n//   const response = await api.json();\n//   return response;\n// });\n\nexport const addComment = createAsyncThunk(\"comment/addComment\", async (comment, thunkAPI) => {\n  const response = await axios.post('http://127.0.0.1:8000/api/addComment', comment); // const response = await fetch('http://127.0.0.1:8000/api/addComment',  {\n  //   method: \"POST\",\n  //     body: JSON.stringify({\n  //       name: comment.comment,\n  //     }),\n  //   headers: { \"Content-Type\": \"application/json\" },\n  // });\n\n  if (response.status == 200) {\n    Swal.fire({\n      title: \"Comment\",\n      text: \"Has been Added Successfully\",\n      type: \"success\"\n    });\n  } // return response.data;\n  //   const res = response.json();\n\n\n  return response;\n}); // export const updateComment = createAsyncThunk(\n//   \"comment/updateComment\",\n//   async (args) => {\n//     const id = args.id;\n//     const response = await fetch(\n//       `http://127.0.0.1:8000/api/update_comment/${id}`,\n//       {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           name: args.name,\n//           description: args.description,\n//         }),\n//       }\n//     );\n//     if (response.ok) {\n//       Swal.fire({\n//         title: \"Comment\",\n//         text: \"Has been updated Successfully\",\n//         type: \"success\",\n//       });\n//     }\n//     const res = response.json();\n//     return res;\n//   }\n// );\n// export const deleteComment = createAsyncThunk(\"comment/deleteComment\", async (id) => {\n//   const response = await fetch(\n//     `http://127.0.0.1:8000/api/delete_comment/${id}`,\n//     {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//     }\n//   );\n//   if (response.ok) {\n//     Swal.fire({\n//       title: \"Comment\",\n//       text: \"Has been deleted Successfully\",\n//       type: \"success\",\n//     });\n//   }\n//   const res = response.json();\n//   return res;\n// });\n\nconst commentSlice = createSlice({\n  name: \"comment\",\n  initialState: {\n    comments: [],\n    status: null\n  },\n  extraReducers: {\n    //get comment from api\n    // [getComments.fulfilled]: (state, action) => {\n    // //   console.log(action);\n    //   state.status = \"success fetch data\";\n    //   state.comments = action.payload;\n    // },\n    // [getComments.pending]: (state) => {\n    //   state.status = \"pending  fetch data\";\n    // },\n    // [getComments.rejected]: (state) => {\n    //   state.status = \"rejected  fetch data\";\n    // },\n    //addcomment to api\n    [addComment.fulfilled]: (state, action) => {\n      console.log(action);\n      state.status = \"success send data\";\n      state.comments.push(action.payload);\n    },\n    [addComment.pending]: state => {\n      state.status = \"pending send data\";\n    },\n    [addComment.rejected]: state => {\n      state.status = \"rejected send data\";\n    } // //update comment in api\n    // [updateComment.fulfilled]: (state, action) => {\n    //   state.status = \"success update data\";\n    //   const { id } = action.payload;\n    //   const comment = state.items.find((comment) => comment.id == id);\n    //   comment.name = action.payload.name;\n    //   comment.description = action.payload.description;\n    //   comment.image = action.payload.image;\n    // },\n    // [updateComment.pending]: (state) => {\n    //   state.status = \"pending update data\";\n    // },\n    // [updateComment.rejected]: (state) => {\n    //   state.status = \"rejected update data\";\n    // },\n    // //delete comment in api\n    // [deleteComment.fulfilled]: (state, action) => {\n    //   state.status = \"success delete data\";\n    //   const { id } = action.payload;\n    //   state.comments = state.comments.filter((comment) => comment.id != id);\n    // },\n    // [deleteComment.pending]: (state) => {\n    //   state.status = \"pending delete data\";\n    // },\n    // [deleteComment.rejected]: (state) => {\n    //   state.status = \"rejected delete data\";\n    // },\n\n  }\n});\nexport default commentSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","Swal","addComment","comment","thunkAPI","response","post","status","fire","title","text","type","commentSlice","name","initialState","comments","extraReducers","fulfilled","state","action","console","log","push","payload","pending","rejected","reducer"],"sources":["C:/xampp/htdocs/startupcompany_project_redux/front_end/src/redux/commentSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\n// export const getComments = createAsyncThunk(\"comment/getComments\"\r\n// , async (args) => {\r\n//   const id = args.id;\r\n//   const api = await fetch(`http://127.0.0.1:8000/api/apicomment/${id}`);\r\n//   const response = await api.json();\r\n\r\n//   return response;\r\n// });\r\n\r\n\r\nexport const addComment = createAsyncThunk(\r\n  \"comment/addComment\",\r\n  async (comment, thunkAPI) => {\r\n    const response = await axios.post( 'http://127.0.0.1:8000/api/addComment' ,comment);\r\n    // const response = await fetch('http://127.0.0.1:8000/api/addComment',  {\r\n    //   method: \"POST\",\r\n    \r\n    //     body: JSON.stringify({\r\n    //       name: comment.comment,\r\n    //     }),\r\n    //   headers: { \"Content-Type\": \"application/json\" },\r\n    // });\r\n    if (response.status == 200) {\r\n      Swal.fire({\r\n        title: \"Comment\",\r\n        text: \"Has been Added Successfully\",\r\n        type: \"success\",\r\n      });\r\n    }\r\n    // return response.data;\r\n    //   const res = response.json();\r\n      return response;\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const updateComment = createAsyncThunk(\r\n//   \"comment/updateComment\",\r\n//   async (args) => {\r\n//     const id = args.id;\r\n//     const response = await fetch(\r\n//       `http://127.0.0.1:8000/api/update_comment/${id}`,\r\n//       {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify({\r\n//           name: args.name,\r\n//           description: args.description,\r\n//         }),\r\n//       }\r\n//     );\r\n\r\n//     if (response.ok) {\r\n//       Swal.fire({\r\n//         title: \"Comment\",\r\n//         text: \"Has been updated Successfully\",\r\n//         type: \"success\",\r\n//       });\r\n//     }\r\n//     const res = response.json();\r\n//     return res;\r\n//   }\r\n// );\r\n\r\n// export const deleteComment = createAsyncThunk(\"comment/deleteComment\", async (id) => {\r\n//   const response = await fetch(\r\n//     `http://127.0.0.1:8000/api/delete_comment/${id}`,\r\n//     {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//     }\r\n//   );\r\n//   if (response.ok) {\r\n//     Swal.fire({\r\n//       title: \"Comment\",\r\n//       text: \"Has been deleted Successfully\",\r\n//       type: \"success\",\r\n//     });\r\n//   }\r\n//   const res = response.json();\r\n//   return res;\r\n// });\r\n\r\n\r\n\r\nconst commentSlice = createSlice({\r\n  name: \"comment\",\r\n  initialState: { comments: [], status: null },\r\n  extraReducers: {\r\n    //get comment from api\r\n    // [getComments.fulfilled]: (state, action) => {\r\n    // //   console.log(action);\r\n    //   state.status = \"success fetch data\";\r\n    //   state.comments = action.payload;\r\n    // },\r\n    // [getComments.pending]: (state) => {\r\n    //   state.status = \"pending  fetch data\";\r\n    // },\r\n    // [getComments.rejected]: (state) => {\r\n    //   state.status = \"rejected  fetch data\";\r\n    // },\r\n    //addcomment to api\r\n\r\n    [addComment.fulfilled]: (state, action) => {\r\n        console.log(action)\r\n      state.status = \"success send data\";\r\n      state.comments.push(action.payload);\r\n    },\r\n    [addComment.pending]: (state) => {\r\n      state.status = \"pending send data\";\r\n    },\r\n    [addComment.rejected]: (state) => {\r\n      state.status = \"rejected send data\";\r\n    },\r\n\r\n    // //update comment in api\r\n    // [updateComment.fulfilled]: (state, action) => {\r\n    //   state.status = \"success update data\";\r\n    //   const { id } = action.payload;\r\n    //   const comment = state.items.find((comment) => comment.id == id);\r\n    //   comment.name = action.payload.name;\r\n    //   comment.description = action.payload.description;\r\n    //   comment.image = action.payload.image;\r\n    // },\r\n    // [updateComment.pending]: (state) => {\r\n    //   state.status = \"pending update data\";\r\n    // },\r\n    // [updateComment.rejected]: (state) => {\r\n    //   state.status = \"rejected update data\";\r\n    // },\r\n\r\n    // //delete comment in api\r\n    // [deleteComment.fulfilled]: (state, action) => {\r\n    //   state.status = \"success delete data\";\r\n    //   const { id } = action.payload;\r\n    //   state.comments = state.comments.filter((comment) => comment.id != id);\r\n    // },\r\n    // [deleteComment.pending]: (state) => {\r\n    //   state.status = \"pending delete data\";\r\n    // },\r\n    // [deleteComment.rejected]: (state) => {\r\n    //   state.status = \"rejected delete data\";\r\n    // },\r\n  },\r\n});\r\n\r\nexport default commentSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAGA,OAAO,MAAMC,UAAU,GAAGJ,gBAAgB,CACxC,oBADwC,EAExC,OAAOK,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CAAY,sCAAZ,EAAoDH,OAApD,CAAvB,CAD2B,CAE3B;EACA;EAEA;EACA;EACA;EACA;EACA;;EACA,IAAIE,QAAQ,CAACE,MAAT,IAAmB,GAAvB,EAA4B;IAC1BN,IAAI,CAACO,IAAL,CAAU;MACRC,KAAK,EAAE,SADC;MAERC,IAAI,EAAE,6BAFE;MAGRC,IAAI,EAAE;IAHE,CAAV;EAKD,CAhB0B,CAiB3B;EACA;;;EACE,OAAON,QAAP;AACH,CAtBuC,CAAnC,C,CAqCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,MAAMO,YAAY,GAAGb,WAAW,CAAC;EAC/Bc,IAAI,EAAE,SADyB;EAE/BC,YAAY,EAAE;IAAEC,QAAQ,EAAE,EAAZ;IAAgBR,MAAM,EAAE;EAAxB,CAFiB;EAG/BS,aAAa,EAAE;IACb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,CAACd,UAAU,CAACe,SAAZ,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACvCC,OAAO,CAACC,GAAR,CAAYF,MAAZ;MACFD,KAAK,CAACX,MAAN,GAAe,mBAAf;MACAW,KAAK,CAACH,QAAN,CAAeO,IAAf,CAAoBH,MAAM,CAACI,OAA3B;IACD,CAnBY;IAoBb,CAACrB,UAAU,CAACsB,OAAZ,GAAuBN,KAAD,IAAW;MAC/BA,KAAK,CAACX,MAAN,GAAe,mBAAf;IACD,CAtBY;IAuBb,CAACL,UAAU,CAACuB,QAAZ,GAAwBP,KAAD,IAAW;MAChCA,KAAK,CAACX,MAAN,GAAe,oBAAf;IACD,CAzBY,CA2Bb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EAtDa;AAHgB,CAAD,CAAhC;AA6DA,eAAeK,YAAY,CAACc,OAA5B"},"metadata":{},"sourceType":"module"}